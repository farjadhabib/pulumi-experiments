---
# Source: jupyterhub/templates/singleuser/netpol.yaml
apiVersion: networking.k8s.io/v1
kind: NetworkPolicy
metadata:
  name: singleuser
  labels:
    component: singleuser
    app: jupyterhub
    release: release-name
    chart: jupyterhub-3.3.8
    heritage: Helm
spec:
  podSelector:
    matchLabels:
      component: singleuser-server
      app: jupyterhub
      release: release-name
  policyTypes:
  - Ingress
  - Egress

  # IMPORTANT:
  # NetworkPolicy's ingress "from" and egress "to" rule specifications require
  # great attention to detail. A quick summary is:
  #
  # 1. You can provide "from"/"to" rules that provide access either ports or a
  #    subset of ports.
  # 2. You can for each "from"/"to" rule provide any number of
  #    "sources"/"destinations" of four different kinds.
  #    - podSelector                        - targets pods with a certain label in the same namespace as the NetworkPolicy
  #    - namespaceSelector                  - targets all pods running in namespaces with a certain label
  #    - namespaceSelector and podSelector  - targets pods with a certain label running in namespaces with a certain label
  #    - ipBlock                            - targets network traffic from/to a set of IP address ranges
  #
  # Read more at: https://kubernetes.io/docs/concepts/services-networking/network-policies/#behavior-of-to-and-from-selectors
  #
  ingress:

    # allowed pods (hub.jupyter.org/network-access-singleuser) --> singleuser-server
  - ports:
    - port: notebook-port
    from:
        # source 1 - labeled pods
    - podSelector:
        matchLabels:
          hub.jupyter.org/network-access-singleuser: "true"

  egress:
    # singleuser-server --> hub
  - to:
    - podSelector:
        matchLabels:
          component: hub
          app: jupyterhub
          release: release-name
    ports:
    - port: 8081

    # singleuser-server --> proxy
    # singleuser-server --> autohttps
    #
    # While not critical for core functionality, a user or library code may rely
    # on communicating with the proxy or autohttps pods via a k8s Service it can
    # detected from well known environment variables.
    #
  - to:
    - podSelector:
        matchLabels:
          component: proxy
          app: jupyterhub
          release: release-name
    ports:
    - port: 8000
  - to:
    - podSelector:
        matchLabels:
          component: autohttps
          app: jupyterhub
          release: release-name
    ports:
    - port: 8080
    - port: 8443

  - ports:
    - port: 53
      protocol: UDP
    - port: 53
      protocol: TCP
    to:
        # Allow outbound connections to DNS ports on the cloud metadata server
    - ipBlock:
        cidr: 169.254.169.254/32
        # Allow outbound connections to DNS ports on pods in the kube-system
        # namespace
    - namespaceSelector:
        matchLabels:
          kubernetes.io/metadata.name: kube-system
        # Allow outbound connections to DNS ports on destinations in the private IP
        # ranges
    - ipBlock:
        cidr: 10.0.0.0/8
    - ipBlock:
        cidr: 172.16.0.0/12
    - ipBlock:
        cidr: 192.168.0.0/16
    # Allow outbound connections to non-private IP ranges
  - to:
    - ipBlock:
        cidr: 0.0.0.0/0
        except:
              # As part of this rule:
              # - don't allow outbound connections to private IPs
        - 10.0.0.0/8
        - 172.16.0.0/12
        - 192.168.0.0/16
              # - don't allow outbound connections to the cloud metadata server
        - 169.254.169.254/32
